// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: category/category.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "category";

export interface Category {
  id: string;
  name: string;
  version: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  slug: string;
  description: string;
}

export interface GetAllCategoryResponse {
  category: Category[];
}

export interface CreateCategoryResponse {
  id: string;
}

export interface CreateCategoryRequest {
  name: string;
  description: string;
}

export interface UpdateCategoryRequest {
  id: string;
  name: string;
  version: number;
}

export interface UpdateCategoryResponse {
  status: string;
}

export interface CategoryBySlugRequest {
  slug: string;
}

export const CATEGORY_PACKAGE_NAME = "category";

export interface CategoriesClient {
  getAllCategory(request: Empty): Observable<GetAllCategoryResponse>;

  createCategory(request: CreateCategoryRequest): Observable<CreateCategoryResponse>;

  updateCategory(request: UpdateCategoryRequest): Observable<UpdateCategoryResponse>;

  getCategoryBySlug(request: CategoryBySlugRequest): Observable<Category>;
}

export interface CategoriesController {
  getAllCategory(
    request: Empty,
  ): Promise<GetAllCategoryResponse> | Observable<GetAllCategoryResponse> | GetAllCategoryResponse;

  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CreateCategoryResponse> | Observable<CreateCategoryResponse> | CreateCategoryResponse;

  updateCategory(
    request: UpdateCategoryRequest,
  ): Promise<UpdateCategoryResponse> | Observable<UpdateCategoryResponse> | UpdateCategoryResponse;

  getCategoryBySlug(request: CategoryBySlugRequest): Promise<Category> | Observable<Category> | Category;
}

export function CategoriesControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllCategory", "createCategory", "updateCategory", "getCategoryBySlug"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Categories", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Categories", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORIES_SERVICE_NAME = "Categories";
