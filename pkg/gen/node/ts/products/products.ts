// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: products/products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "products";

export interface Empty {
}

export interface Products {
  id: string;
  name: string;
  price: number;
  version: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  images: string[];
  categoryId: string;
  description: string;
}

export interface GetAllProductsResponse {
  products: Products[];
}

export const PRODUCTS_PACKAGE_NAME = "products";

export interface ProductClient {
  getAllProducts(request: Empty): Observable<GetAllProductsResponse>;
}

export interface ProductController {
  getAllProducts(
    request: Empty,
  ): Promise<GetAllProductsResponse> | Observable<GetAllProductsResponse> | GetAllProductsResponse;
}

export function ProductControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllProducts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Product", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Product", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "Product";
